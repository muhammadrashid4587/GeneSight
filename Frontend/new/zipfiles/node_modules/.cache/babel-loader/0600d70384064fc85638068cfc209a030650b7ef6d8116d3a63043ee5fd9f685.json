{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadrashid/Desktop/Mammu/Mammu/GeneSight/GeneSight/Frontend/new/zipfiles/src/App.js\",\n  _s = $RefreshSig$();\n// // // App.js\n// // import React, { useState, useEffect } from 'react';\n// // import SplashScreen from './SplashScreen';\n// // import './styles.css';\n\n// // // Import your video from the assets folder\n// // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // function App() {\n// //   // 1) Splash screen states\n// //   const [showSplash, setShowSplash] = useState(true);\n// //   const [fadeClass, setFadeClass] = useState('');\n\n// //   // 2) Page state (upload or results)\n// //   const [page, setPage] = useState('upload');\n\n// //   // Splash screen fade-out effect\n// //   useEffect(() => {\n// //     const timer = setTimeout(() => {\n// //       setFadeClass('fade-out');\n// //       setTimeout(() => {\n// //         setShowSplash(false);\n// //       }, 1000);\n// //     }, 3000);\n\n// //     return () => clearTimeout(timer);\n// //   }, []);\n\n// //   // Switch to 'results' page after file upload\n// //   const handleUpload = () => {\n// //     setPage('results');\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       {/* SPLASH SCREEN */}\n// //       {showSplash ? (\n// //         <div className={`splash-wrapper ${fadeClass}`}>\n// //           <SplashScreen />\n// //         </div>\n// //       ) : (\n// //         /* MAIN MENU PAGE */\n// //         <div className=\"main-menu\">\n// //           <h1 className=\"main-title\">GENESIGHT</h1>\n// //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// //           <p className=\"description\">\n// //             Get a quick and explainable risk assessment for disease prediction.\n// //           </p>\n\n// //           {/* HOLOGRAM SECTION */}\n// //           <div className=\"hologram-container\">\n// //             <video\n// //               autoPlay\n// //               loop\n// //               muted\n// //               playsInline\n// //               className=\"hologram-video\"\n// //             >\n// //               <source src={dnaVideo} type=\"video/mp4\" />\n// //               {/* Fallback text if video can't be played */}\n// //               Your browser does not support the video tag.\n// //             </video>\n// //           </div>\n\n// //           {/* CONTENT: either upload form or results */}\n// //           {page === 'upload' ? (\n// //             <div className=\"upload-section\">\n// //               {/* \"Select File\" label as a clickable area for input */}\n// //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// //                 Select File\n// //               </label>\n// //               <input\n// //                 id=\"file-upload\"\n// //                 className=\"file-input\"\n// //                 type=\"file\"\n// //                 onChange={(e) =>\n// //                   console.log('File selected:', e.target.files[0])\n// //                 }\n// //               />\n// //               <button className=\"upload-button\" onClick={handleUpload}>\n// //                 Upload Files Now\n// //               </button>\n// //             </div>\n// //           ) : (\n// //             <div className=\"results-section\">\n// //               <h2>Analysis Results</h2>\n// //               <p>Your model predictions or data visualizations go here!</p>\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import SplashScreen from './SplashScreen';\n// import './styles.css';\n// import dnaVideo from './assets/dnaHologram.mp4';\n\n// function App() {\n//   // Splash screen and page states\n//   const [showSplash, setShowSplash] = useState(true);\n//   const [fadeClass, setFadeClass] = useState('');\n//   const [page, setPage] = useState('upload');\n\n//   // State to store the file selected by the user\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State to store prediction results\n//   const [result, setResult] = useState(null);\n\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setFadeClass('fade-out');\n//       setTimeout(() => {\n//         setShowSplash(false);\n//       }, 1000);\n//     }, 3000);\n//     return () => clearTimeout(timer);\n//   }, []);\n\n//   const handleFileChange = (e) => {\n//     if (e.target.files.length > 0) {\n//       setSelectedFile(e.target.files[0]);\n//     }\n//   };\n\n//   const handleUpload = async () => {\n//     if (!selectedFile) {\n//       alert(\"Please select a file first.\");\n//       return;\n//     }\n//     // Create a FormData object and append the file\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n//         method: \"POST\",\n//         body: formData\n//       });\n//       const data = await response.json();\n//       console.log(\"Prediction result:\", data);\n//       setResult(data);\n//       setPage(\"results\");\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {showSplash ? (\n//         <div className={`splash-wrapper ${fadeClass}`}>\n//           <SplashScreen />\n//         </div>\n//       ) : (\n//         <div className=\"main-menu\">\n//           <h1 className=\"main-title\">GENESIGHT</h1>\n//           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n//           <p className=\"description\">\n//             Get a quick and explainable risk assessment for disease prediction.\n//           </p>\n\n//           {/* Hologram Section */}\n//           <div className=\"hologram-container\">\n//             <video autoPlay loop muted playsInline className=\"hologram-video\">\n//               <source src={dnaVideo} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           </div>\n\n//           {page === 'upload' ? (\n//             <div className=\"upload-section\">\n//               <label htmlFor=\"file-upload\" className=\"file-label\">\n//                 Select File\n//               </label>\n//               <input\n//                 id=\"file-upload\"\n//                 className=\"file-input\"\n//                 type=\"file\"\n//                 onChange={handleFileChange}\n//               />\n//               <button className=\"upload-button\" onClick={handleUpload}>\n//                 Upload Files Now\n//               </button>\n//             </div>\n//           ) : (\n//             <div className=\"results-section\">\n//               <h2>Analysis Results</h2>\n//               {result ? (\n//                 <>\n//                   <p>Risk Score: {result.riskScore}</p>\n//                   <ul>\n//                     {result.topFeatures.map((feat, idx) => (\n//                       <li key={idx}>\n//                         {feat.gene}: {feat.importance.toFixed(2)}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 </>\n//               ) : (\n//                 <p>No results available.</p>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport SplashScreen from './SplashScreen';\nimport './styles.css';\nimport dnaVideo from './assets/dnaHologram.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Splash screen and page states\n  const [showSplash, setShowSplash] = useState(true);\n  const [fadeClass, setFadeClass] = useState('');\n  const [page, setPage] = useState('upload');\n\n  // State to store the file selected by the user\n  const [selectedFile, setSelectedFile] = useState(null);\n  // State to store prediction results\n  const [result, setResult] = useState(null);\n  // Loading state\n  const [isLoading, setIsLoading] = useState(false);\n  // Error state\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFadeClass('fade-out');\n      setTimeout(() => {\n        setShowSplash(false);\n      }, 1000);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n  const handleFileChange = e => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n      setError(null); // Clear any previous errors\n    }\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n\n    // Set loading state\n    setIsLoading(true);\n    setError(null);\n\n    // Create a FormData object and append the file\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n    try {\n      // Make sure this URL matches your FastAPI server\n      const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(\"Prediction result:\", data);\n\n      // Make sure the data matches the expected format\n      if (data.riskScore === undefined || !Array.isArray(data.topFeatures)) {\n        throw new Error(\"Unexpected response format from server\");\n      }\n      setResult(data);\n      setPage(\"results\");\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setError(`Error: ${error.message || \"Failed to process data\"}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to determine risk level color\n  const getRiskColor = score => {\n    if (score >= 0.7) return \"high-risk\";\n    if (score >= 0.4) return \"medium-risk\";\n    return \"low-risk\";\n  };\n\n  // Go back to upload page\n  const handleBack = () => {\n    setPage('upload');\n    setResult(null);\n    setSelectedFile(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: showSplash ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `splash-wrapper ${fadeClass}`,\n      children: /*#__PURE__*/_jsxDEV(SplashScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-title\",\n        children: \"GENESIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"subtitle\",\n        children: page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: page === 'upload' ? 'Get a quick and explainable risk assessment for disease prediction.' : 'Analysis based on your genetic expression markers.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hologram-container\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          playsInline: true,\n          className: \"hologram-video\",\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: dnaVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), page === 'upload' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"file-label\",\n          children: \"Select Gene Expression File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"file-upload\",\n          className: \"file-input\",\n          type: \"file\",\n          accept: \".csv,.txt\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 15\n        }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-selected\",\n          children: [\"Selected: \", selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `upload-button ${isLoading ? 'loading' : ''}`,\n          onClick: handleUpload,\n          disabled: isLoading || !selectedFile,\n          children: isLoading ? 'Processing...' : 'Analyze Genetic Data'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Genetic Risk Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 15\n        }, this), result ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `risk-score ${getRiskColor(result.riskScore)}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Risk Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-value\",\n              children: [(result.riskScore * 100).toFixed(1), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"risk-level\",\n              children: result.riskScore >= 0.7 ? 'High Risk' : result.riskScore >= 0.4 ? 'Medium Risk' : 'Low Risk'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top-features\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Key Genetic Markers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"feature-list\",\n              children: result.topFeatures.map((feat, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"feature-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"gene-name\",\n                  children: feat.gene\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"importance-bar-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"importance-bar\",\n                    style: {\n                      width: `${Math.min(feat.importance * 100, 100)}%`\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 384,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"importance-value\",\n                  children: feat.importance.toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 27\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"back-button\",\n            onClick: handleBack,\n            children: \"Analyze Another Sample\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading results...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O1/eHNHwgPvyAgd1DUtP0ZZFWio=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SplashScreen","dnaVideo","jsxDEV","_jsxDEV","App","_s","showSplash","setShowSplash","fadeClass","setFadeClass","page","setPage","selectedFile","setSelectedFile","result","setResult","isLoading","setIsLoading","error","setError","timer","setTimeout","clearTimeout","handleFileChange","e","target","files","length","handleUpload","formData","FormData","append","response","fetch","method","body","ok","Error","status","statusText","data","json","console","log","riskScore","undefined","Array","isArray","topFeatures","message","getRiskColor","score","handleBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","playsInline","src","type","htmlFor","id","accept","onChange","name","onClick","disabled","toFixed","map","feat","idx","gene","style","width","Math","min","importance","_c","$RefreshReg$"],"sources":["/Users/muhammadrashid/Desktop/Mammu/Mammu/GeneSight/GeneSight/Frontend/new/zipfiles/src/App.js"],"sourcesContent":["// // // App.js\n// // import React, { useState, useEffect } from 'react';\n// // import SplashScreen from './SplashScreen';\n// // import './styles.css';\n\n// // // Import your video from the assets folder\n// // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // function App() {\n// //   // 1) Splash screen states\n// //   const [showSplash, setShowSplash] = useState(true);\n// //   const [fadeClass, setFadeClass] = useState('');\n\n// //   // 2) Page state (upload or results)\n// //   const [page, setPage] = useState('upload');\n\n// //   // Splash screen fade-out effect\n// //   useEffect(() => {\n// //     const timer = setTimeout(() => {\n// //       setFadeClass('fade-out');\n// //       setTimeout(() => {\n// //         setShowSplash(false);\n// //       }, 1000);\n// //     }, 3000);\n\n// //     return () => clearTimeout(timer);\n// //   }, []);\n\n// //   // Switch to 'results' page after file upload\n// //   const handleUpload = () => {\n// //     setPage('results');\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       {/* SPLASH SCREEN */}\n// //       {showSplash ? (\n// //         <div className={`splash-wrapper ${fadeClass}`}>\n// //           <SplashScreen />\n// //         </div>\n// //       ) : (\n// //         /* MAIN MENU PAGE */\n// //         <div className=\"main-menu\">\n// //           <h1 className=\"main-title\">GENESIGHT</h1>\n// //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// //           <p className=\"description\">\n// //             Get a quick and explainable risk assessment for disease prediction.\n// //           </p>\n\n// //           {/* HOLOGRAM SECTION */}\n// //           <div className=\"hologram-container\">\n// //             <video\n// //               autoPlay\n// //               loop\n// //               muted\n// //               playsInline\n// //               className=\"hologram-video\"\n// //             >\n// //               <source src={dnaVideo} type=\"video/mp4\" />\n// //               {/* Fallback text if video can't be played */}\n// //               Your browser does not support the video tag.\n// //             </video>\n// //           </div>\n\n// //           {/* CONTENT: either upload form or results */}\n// //           {page === 'upload' ? (\n// //             <div className=\"upload-section\">\n// //               {/* \"Select File\" label as a clickable area for input */}\n// //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// //                 Select File\n// //               </label>\n// //               <input\n// //                 id=\"file-upload\"\n// //                 className=\"file-input\"\n// //                 type=\"file\"\n// //                 onChange={(e) =>\n// //                   console.log('File selected:', e.target.files[0])\n// //                 }\n// //               />\n// //               <button className=\"upload-button\" onClick={handleUpload}>\n// //                 Upload Files Now\n// //               </button>\n// //             </div>\n// //           ) : (\n// //             <div className=\"results-section\">\n// //               <h2>Analysis Results</h2>\n// //               <p>Your model predictions or data visualizations go here!</p>\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n\n// import React, { useState, useEffect } from 'react';\n// import SplashScreen from './SplashScreen';\n// import './styles.css';\n// import dnaVideo from './assets/dnaHologram.mp4';\n\n// function App() {\n//   // Splash screen and page states\n//   const [showSplash, setShowSplash] = useState(true);\n//   const [fadeClass, setFadeClass] = useState('');\n//   const [page, setPage] = useState('upload');\n\n//   // State to store the file selected by the user\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State to store prediction results\n//   const [result, setResult] = useState(null);\n\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setFadeClass('fade-out');\n//       setTimeout(() => {\n//         setShowSplash(false);\n//       }, 1000);\n//     }, 3000);\n//     return () => clearTimeout(timer);\n//   }, []);\n\n//   const handleFileChange = (e) => {\n//     if (e.target.files.length > 0) {\n//       setSelectedFile(e.target.files[0]);\n//     }\n//   };\n\n//   const handleUpload = async () => {\n//     if (!selectedFile) {\n//       alert(\"Please select a file first.\");\n//       return;\n//     }\n//     // Create a FormData object and append the file\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n//         method: \"POST\",\n//         body: formData\n//       });\n//       const data = await response.json();\n//       console.log(\"Prediction result:\", data);\n//       setResult(data);\n//       setPage(\"results\");\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {showSplash ? (\n//         <div className={`splash-wrapper ${fadeClass}`}>\n//           <SplashScreen />\n//         </div>\n//       ) : (\n//         <div className=\"main-menu\">\n//           <h1 className=\"main-title\">GENESIGHT</h1>\n//           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n//           <p className=\"description\">\n//             Get a quick and explainable risk assessment for disease prediction.\n//           </p>\n\n//           {/* Hologram Section */}\n//           <div className=\"hologram-container\">\n//             <video autoPlay loop muted playsInline className=\"hologram-video\">\n//               <source src={dnaVideo} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           </div>\n\n//           {page === 'upload' ? (\n//             <div className=\"upload-section\">\n//               <label htmlFor=\"file-upload\" className=\"file-label\">\n//                 Select File\n//               </label>\n//               <input\n//                 id=\"file-upload\"\n//                 className=\"file-input\"\n//                 type=\"file\"\n//                 onChange={handleFileChange}\n//               />\n//               <button className=\"upload-button\" onClick={handleUpload}>\n//                 Upload Files Now\n//               </button>\n//             </div>\n//           ) : (\n//             <div className=\"results-section\">\n//               <h2>Analysis Results</h2>\n//               {result ? (\n//                 <>\n//                   <p>Risk Score: {result.riskScore}</p>\n//                   <ul>\n//                     {result.topFeatures.map((feat, idx) => (\n//                       <li key={idx}>\n//                         {feat.gene}: {feat.importance.toFixed(2)}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 </>\n//               ) : (\n//                 <p>No results available.</p>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect } from 'react';\nimport SplashScreen from './SplashScreen';\nimport './styles.css';\nimport dnaVideo from './assets/dnaHologram.mp4';\n\nfunction App() {\n  // Splash screen and page states\n  const [showSplash, setShowSplash] = useState(true);\n  const [fadeClass, setFadeClass] = useState('');\n  const [page, setPage] = useState('upload');\n\n  // State to store the file selected by the user\n  const [selectedFile, setSelectedFile] = useState(null);\n  // State to store prediction results\n  const [result, setResult] = useState(null);\n  // Loading state\n  const [isLoading, setIsLoading] = useState(false);\n  // Error state\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFadeClass('fade-out');\n      setTimeout(() => {\n        setShowSplash(false);\n      }, 1000);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleFileChange = (e) => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n      setError(null); // Clear any previous errors\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n    \n    // Set loading state\n    setIsLoading(true);\n    setError(null);\n    \n    // Create a FormData object and append the file\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n\n    try {\n      // Make sure this URL matches your FastAPI server\n      const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n        method: \"POST\",\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"Prediction result:\", data);\n      \n      // Make sure the data matches the expected format\n      if (data.riskScore === undefined || !Array.isArray(data.topFeatures)) {\n        throw new Error(\"Unexpected response format from server\");\n      }\n      \n      setResult(data);\n      setPage(\"results\");\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setError(`Error: ${error.message || \"Failed to process data\"}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to determine risk level color\n  const getRiskColor = (score) => {\n    if (score >= 0.7) return \"high-risk\";\n    if (score >= 0.4) return \"medium-risk\";\n    return \"low-risk\";\n  };\n\n  // Go back to upload page\n  const handleBack = () => {\n    setPage('upload');\n    setResult(null);\n    setSelectedFile(null);\n  };\n\n  return (\n    <div className=\"App\">\n      {showSplash ? (\n        <div className={`splash-wrapper ${fadeClass}`}>\n          <SplashScreen />\n        </div>\n      ) : (\n        <div className=\"main-menu\">\n          <h1 className=\"main-title\">GENESIGHT</h1>\n          <h2 className=\"subtitle\">\n            {page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'}\n          </h2>\n          <p className=\"description\">\n            {page === 'upload' \n              ? 'Get a quick and explainable risk assessment for disease prediction.'\n              : 'Analysis based on your genetic expression markers.'}\n          </p>\n\n          {/* Hologram Section */}\n          <div className=\"hologram-container\">\n            <video autoPlay loop muted playsInline className=\"hologram-video\">\n              <source src={dnaVideo} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n\n          {page === 'upload' ? (\n            <div className=\"upload-section\">\n              <label htmlFor=\"file-upload\" className=\"file-label\">\n                Select Gene Expression File\n              </label>\n              <input\n                id=\"file-upload\"\n                className=\"file-input\"\n                type=\"file\"\n                accept=\".csv,.txt\"\n                onChange={handleFileChange}\n              />\n              {selectedFile && (\n                <p className=\"file-selected\">Selected: {selectedFile.name}</p>\n              )}\n              {error && <p className=\"error-message\">{error}</p>}\n              <button \n                className={`upload-button ${isLoading ? 'loading' : ''}`} \n                onClick={handleUpload}\n                disabled={isLoading || !selectedFile}\n              >\n                {isLoading ? 'Processing...' : 'Analyze Genetic Data'}\n              </button>\n            </div>\n          ) : (\n            <div className=\"results-section\">\n              <h2>Genetic Risk Analysis</h2>\n              {result ? (\n                <div className=\"results-container\">\n                  <div className={`risk-score ${getRiskColor(result.riskScore)}`}>\n                    <h3>Risk Score</h3>\n                    <div className=\"score-value\">{(result.riskScore * 100).toFixed(1)}%</div>\n                    <p className=\"risk-level\">\n                      {result.riskScore >= 0.7 ? 'High Risk' : \n                       result.riskScore >= 0.4 ? 'Medium Risk' : 'Low Risk'}\n                    </p>\n                  </div>\n                  \n                  <div className=\"top-features\">\n                    <h3>Key Genetic Markers</h3>\n                    <ul className=\"feature-list\">\n                      {result.topFeatures.map((feat, idx) => (\n                        <li key={idx} className=\"feature-item\">\n                          <span className=\"gene-name\">{feat.gene}</span>\n                          <div className=\"importance-bar-container\">\n                            <div \n                              className=\"importance-bar\" \n                              style={{width: `${Math.min(feat.importance * 100, 100)}%`}}\n                            ></div>\n                          </div>\n                          <span className=\"importance-value\">{feat.importance.toFixed(2)}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <button className=\"back-button\" onClick={handleBack}>\n                    Analyze Another Sample\n                  </button>\n                </div>\n              ) : (\n                <p>Loading results...</p>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,cAAc;AACrB,OAAOC,QAAQ,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}