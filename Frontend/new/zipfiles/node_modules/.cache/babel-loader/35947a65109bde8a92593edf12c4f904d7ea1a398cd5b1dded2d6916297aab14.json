{"ast":null,"code":"var _jsxFileName = \"/Users/muhammadrashid/Desktop/Mammu/Mammu/GeneSight/GeneSight/Frontend/new/zipfiles/src/App.js\",\n  _s = $RefreshSig$();\n// // // // App.js\n// // // import React, { useState, useEffect } from 'react';\n// // // import SplashScreen from './SplashScreen';\n// // // import './styles.css';\n\n// // // // Import your video from the assets folder\n// // // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // // function App() {\n// // //   // 1) Splash screen states\n// // //   const [showSplash, setShowSplash] = useState(true);\n// // //   const [fadeClass, setFadeClass] = useState('');\n\n// // //   // 2) Page state (upload or results)\n// // //   const [page, setPage] = useState('upload');\n\n// // //   // Splash screen fade-out effect\n// // //   useEffect(() => {\n// // //     const timer = setTimeout(() => {\n// // //       setFadeClass('fade-out');\n// // //       setTimeout(() => {\n// // //         setShowSplash(false);\n// // //       }, 1000);\n// // //     }, 3000);\n\n// // //     return () => clearTimeout(timer);\n// // //   }, []);\n\n// // //   // Switch to 'results' page after file upload\n// // //   const handleUpload = () => {\n// // //     setPage('results');\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       {/* SPLASH SCREEN */}\n// // //       {showSplash ? (\n// // //         <div className={`splash-wrapper ${fadeClass}`}>\n// // //           <SplashScreen />\n// // //         </div>\n// // //       ) : (\n// // //         /* MAIN MENU PAGE */\n// // //         <div className=\"main-menu\">\n// // //           <h1 className=\"main-title\">GENESIGHT</h1>\n// // //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// // //           <p className=\"description\">\n// // //             Get a quick and explainable risk assessment for disease prediction.\n// // //           </p>\n\n// // //           {/* HOLOGRAM SECTION */}\n// // //           <div className=\"hologram-container\">\n// // //             <video\n// // //               autoPlay\n// // //               loop\n// // //               muted\n// // //               playsInline\n// // //               className=\"hologram-video\"\n// // //             >\n// // //               <source src={dnaVideo} type=\"video/mp4\" />\n// // //               {/* Fallback text if video can't be played */}\n// // //               Your browser does not support the video tag.\n// // //             </video>\n// // //           </div>\n\n// // //           {/* CONTENT: either upload form or results */}\n// // //           {page === 'upload' ? (\n// // //             <div className=\"upload-section\">\n// // //               {/* \"Select File\" label as a clickable area for input */}\n// // //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// // //                 Select File\n// // //               </label>\n// // //               <input\n// // //                 id=\"file-upload\"\n// // //                 className=\"file-input\"\n// // //                 type=\"file\"\n// // //                 onChange={(e) =>\n// // //                   console.log('File selected:', e.target.files[0])\n// // //                 }\n// // //               />\n// // //               <button className=\"upload-button\" onClick={handleUpload}>\n// // //                 Upload Files Now\n// // //               </button>\n// // //             </div>\n// // //           ) : (\n// // //             <div className=\"results-section\">\n// // //               <h2>Analysis Results</h2>\n// // //               <p>Your model predictions or data visualizations go here!</p>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n// // import React, { useState, useEffect } from 'react';\n// // import SplashScreen from './SplashScreen';\n// // import './styles.css';\n// // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // function App() {\n// //   // Splash screen and page states\n// //   const [showSplash, setShowSplash] = useState(true);\n// //   const [fadeClass, setFadeClass] = useState('');\n// //   const [page, setPage] = useState('upload');\n\n// //   // State to store the file selected by the user\n// //   const [selectedFile, setSelectedFile] = useState(null);\n// //   // State to store prediction results\n// //   const [result, setResult] = useState(null);\n\n// //   useEffect(() => {\n// //     const timer = setTimeout(() => {\n// //       setFadeClass('fade-out');\n// //       setTimeout(() => {\n// //         setShowSplash(false);\n// //       }, 1000);\n// //     }, 3000);\n// //     return () => clearTimeout(timer);\n// //   }, []);\n\n// //   const handleFileChange = (e) => {\n// //     if (e.target.files.length > 0) {\n// //       setSelectedFile(e.target.files[0]);\n// //     }\n// //   };\n\n// //   const handleUpload = async () => {\n// //     if (!selectedFile) {\n// //       alert(\"Please select a file first.\");\n// //       return;\n// //     }\n// //     // Create a FormData object and append the file\n// //     const formData = new FormData();\n// //     formData.append(\"file\", selectedFile);\n\n// //     try {\n// //       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n// //         method: \"POST\",\n// //         body: formData\n// //       });\n// //       const data = await response.json();\n// //       console.log(\"Prediction result:\", data);\n// //       setResult(data);\n// //       setPage(\"results\");\n// //     } catch (error) {\n// //       console.error(\"Error uploading file:\", error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       {showSplash ? (\n// //         <div className={`splash-wrapper ${fadeClass}`}>\n// //           <SplashScreen />\n// //         </div>\n// //       ) : (\n// //         <div className=\"main-menu\">\n// //           <h1 className=\"main-title\">GENESIGHT</h1>\n// //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// //           <p className=\"description\">\n// //             Get a quick and explainable risk assessment for disease prediction.\n// //           </p>\n\n// //           {/* Hologram Section */}\n// //           <div className=\"hologram-container\">\n// //             <video autoPlay loop muted playsInline className=\"hologram-video\">\n// //               <source src={dnaVideo} type=\"video/mp4\" />\n// //               Your browser does not support the video tag.\n// //             </video>\n// //           </div>\n\n// //           {page === 'upload' ? (\n// //             <div className=\"upload-section\">\n// //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// //                 Select File\n// //               </label>\n// //               <input\n// //                 id=\"file-upload\"\n// //                 className=\"file-input\"\n// //                 type=\"file\"\n// //                 onChange={handleFileChange}\n// //               />\n// //               <button className=\"upload-button\" onClick={handleUpload}>\n// //                 Upload Files Now\n// //               </button>\n// //             </div>\n// //           ) : (\n// //             <div className=\"results-section\">\n// //               <h2>Analysis Results</h2>\n// //               {result ? (\n// //                 <>\n// //                   <p>Risk Score: {result.riskScore}</p>\n// //                   <ul>\n// //                     {result.topFeatures.map((feat, idx) => (\n// //                       <li key={idx}>\n// //                         {feat.gene}: {feat.importance.toFixed(2)}\n// //                       </li>\n// //                     ))}\n// //                   </ul>\n// //                 </>\n// //               ) : (\n// //                 <p>No results available.</p>\n// //               )}\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import SplashScreen from './SplashScreen';\n// import './styles.css';\n// import dnaVideo from './assets/dnaHologram.mp4';\n\n// function App() {\n//   // Splash screen and page states\n//   const [showSplash, setShowSplash] = useState(true);\n//   const [fadeClass, setFadeClass] = useState('');\n//   const [page, setPage] = useState('upload');\n\n//   // State to store the file selected by the user\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State to store prediction results\n//   const [result, setResult] = useState(null);\n//   // Loading state\n//   const [isLoading, setIsLoading] = useState(false);\n//   // Error state\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setFadeClass('fade-out');\n//       setTimeout(() => {\n//         setShowSplash(false);\n//       }, 1000);\n//     }, 3000);\n//     return () => clearTimeout(timer);\n//   }, []);\n\n//   const handleFileChange = (e) => {\n//     if (e.target.files.length > 0) {\n//       setSelectedFile(e.target.files[0]);\n//       setError(null); // Clear any previous errors\n//     }\n//   };\n\n//   const handleUpload = async () => {\n//     if (!selectedFile) {\n//       setError(\"Please select a file first.\");\n//       return;\n//     }\n\n//     // Set loading state\n//     setIsLoading(true);\n//     setError(null);\n\n//     // Create a FormData object and append the file\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       // Make sure this URL matches your FastAPI server\n//       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n//         method: \"POST\",\n//         body: formData\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Prediction result:\", data);\n\n//       // Make sure the data matches the expected format\n//       if (data.riskScore === undefined || !Array.isArray(data.topFeatures)) {\n//         throw new Error(\"Unexpected response format from server\");\n//       }\n\n//       setResult(data);\n//       setPage(\"results\");\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//       setError(`Error: ${error.message || \"Failed to process data\"}`);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Function to determine risk level color\n//   const getRiskColor = (score) => {\n//     if (score >= 0.7) return \"high-risk\";\n//     if (score >= 0.4) return \"medium-risk\";\n//     return \"low-risk\";\n//   };\n\n//   // Go back to upload page\n//   const handleBack = () => {\n//     setPage('upload');\n//     setResult(null);\n//     setSelectedFile(null);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {showSplash ? (\n//         <div className={`splash-wrapper ${fadeClass}`}>\n//           <SplashScreen />\n//         </div>\n//       ) : (\n//         <div className=\"main-menu\">\n//           <h1 className=\"main-title\">GENESIGHT</h1>\n//           <h2 className=\"subtitle\">\n//             {page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'}\n//           </h2>\n//           <p className=\"description\">\n//             {page === 'upload' \n//               ? 'Get a quick and explainable risk assessment for disease prediction.'\n//               : 'Analysis based on your genetic expression markers.'}\n//           </p>\n\n//           {/* Hologram Section */}\n//           <div className=\"hologram-container\">\n//             <video autoPlay loop muted playsInline className=\"hologram-video\">\n//               <source src={dnaVideo} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           </div>\n\n//           {page === 'upload' ? (\n//             <div className=\"upload-section\">\n//               <label htmlFor=\"file-upload\" className=\"file-label\">\n//                 Select Gene Expression File\n//               </label>\n//               <input\n//                 id=\"file-upload\"\n//                 className=\"file-input\"\n//                 type=\"file\"\n//                 accept=\".csv,.txt\"\n//                 onChange={handleFileChange}\n//               />\n//               {selectedFile && (\n//                 <p className=\"file-selected\">Selected: {selectedFile.name}</p>\n//               )}\n//               {error && <p className=\"error-message\">{error}</p>}\n//               <button \n//                 className={`upload-button ${isLoading ? 'loading' : ''}`} \n//                 onClick={handleUpload}\n//                 disabled={isLoading || !selectedFile}\n//               >\n//                 {isLoading ? 'Processing...' : 'Analyze Genetic Data'}\n//               </button>\n//             </div>\n//           ) : (\n//             <div className=\"results-section\">\n//               <h2>Genetic Risk Analysis</h2>\n//               {result ? (\n//                 <div className=\"results-container\">\n//                   <div className={`risk-score ${getRiskColor(result.riskScore)}`}>\n//                     <h3>Risk Score</h3>\n//                     <div className=\"score-value\">{(result.riskScore * 100).toFixed(1)}%</div>\n//                     <p className=\"risk-level\">\n//                       {result.riskScore >= 0.7 ? 'High Risk' : \n//                        result.riskScore >= 0.4 ? 'Medium Risk' : 'Low Risk'}\n//                     </p>\n//                   </div>\n\n//                   <div className=\"top-features\">\n//                     <h3>Key Genetic Markers</h3>\n//                     <ul className=\"feature-list\">\n//                       {result.topFeatures.map((feat, idx) => (\n//                         <li key={idx} className=\"feature-item\">\n//                           <span className=\"gene-name\">{feat.gene}</span>\n//                           <div className=\"importance-bar-container\">\n//                             <div \n//                               className=\"importance-bar\" \n//                               style={{width: `${Math.min(feat.importance * 100, 100)}%`}}\n//                             ></div>\n//                           </div>\n//                           <span className=\"importance-value\">{feat.importance.toFixed(2)}</span>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   </div>\n\n//                   <button className=\"back-button\" onClick={handleBack}>\n//                     Analyze Another Sample\n//                   </button>\n//                 </div>\n//               ) : (\n//                 <p>Loading results...</p>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport SplashScreen from './SplashScreen';\nimport './styles.css';\nimport dnaVideo from './assets/dnaHologram.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Splash screen and page states\n  const [showSplash, setShowSplash] = useState(true);\n  const [fadeClass, setFadeClass] = useState('');\n  const [page, setPage] = useState('upload');\n\n  // State to store the file selected by the user\n  const [selectedFile, setSelectedFile] = useState(null);\n  // State to store prediction results\n  const [result, setResult] = useState(null);\n  // Loading state\n  const [isLoading, setIsLoading] = useState(false);\n  // Error state\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFadeClass('fade-out');\n      setTimeout(() => {\n        setShowSplash(false);\n      }, 1000);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n  const handleFileChange = e => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n      setError(null); // Clear any previous errors\n    }\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n\n    // Set loading state\n    setIsLoading(true);\n    setError(null);\n\n    // Create a FormData object and append the file\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n    try {\n      // Make sure this URL matches your FastAPI server\n      const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(\"Prediction result:\", data);\n\n      // Validate the response data structure\n      validateResultData(data);\n      setResult(data);\n      setPage(\"results\");\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setError(`Error: ${error.message || \"Failed to process data\"}`);\n      setPage(\"upload\"); // Stay on upload page on error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to validate the response data structure\n  const validateResultData = data => {\n    if (!data) {\n      throw new Error(\"No data received from server\");\n    }\n    if (typeof data.riskScore !== 'number') {\n      throw new Error(\"Invalid risk score format in response\");\n    }\n    if (!Array.isArray(data.topFeatures)) {\n      throw new Error(\"Invalid top features format in response\");\n    }\n\n    // Check each feature has the required structure\n    data.topFeatures.forEach((feature, index) => {\n      if (!feature.gene || typeof feature.importance !== 'number') {\n        throw new Error(`Invalid feature data at index ${index}`);\n      }\n    });\n  };\n\n  // Function to safely render numeric values\n  const safeNumberDisplay = (value, decimals = 1) => {\n    if (value === undefined || value === null || isNaN(value)) {\n      return \"N/A\";\n    }\n    return typeof value === 'number' ? value.toFixed(decimals) : \"N/A\";\n  };\n\n  // Function to determine risk level color\n  const getRiskColor = score => {\n    if (!score && score !== 0) return \"unknown-risk\";\n    if (score >= 0.7) return \"high-risk\";\n    if (score >= 0.4) return \"medium-risk\";\n    return \"low-risk\";\n  };\n\n  // Function to get risk level text\n  const getRiskLevelText = score => {\n    if (!score && score !== 0) return \"Unknown Risk\";\n    if (score >= 0.7) return \"High Risk\";\n    if (score >= 0.4) return \"Medium Risk\";\n    return \"Low Risk\";\n  };\n\n  // Go back to upload page\n  const handleBack = () => {\n    setPage('upload');\n    setResult(null);\n    setSelectedFile(null);\n    setError(null);\n  };\n\n  // Retry connection to server\n  const handleRetry = () => {\n    if (selectedFile) {\n      handleUpload();\n    } else {\n      setError(\"Please select a file first.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: showSplash ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `splash-wrapper ${fadeClass}`,\n      children: /*#__PURE__*/_jsxDEV(SplashScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"main-title\",\n        children: \"GENESIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"subtitle\",\n        children: page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: page === 'upload' ? 'Get a quick and explainable risk assessment for disease prediction.' : 'Analysis based on your genetic expression markers.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hologram-container\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          playsInline: true,\n          className: \"hologram-video\",\n          onError: e => console.error(\"Video failed to load:\", e),\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: dnaVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }, this), page === 'upload' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"file-label\",\n          children: \"Select Gene Expression File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"file-upload\",\n          className: \"file-input\",\n          type: \"file\",\n          accept: \".csv,.txt\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 15\n        }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"file-selected\",\n          children: [\"Selected: \", selectedFile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 17\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-message\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"retry-button\",\n            onClick: handleRetry,\n            children: \"Retry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `upload-button ${isLoading ? 'loading' : ''}`,\n          onClick: handleUpload,\n          disabled: isLoading || !selectedFile,\n          children: isLoading ? 'Processing...' : 'Analyze Genetic Data'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Genetic Risk Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 15\n        }, this), result ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `risk-score ${getRiskColor(result.riskScore)}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Risk Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score-value\",\n              children: typeof result.riskScore === 'number' ? `${(result.riskScore * 100).toFixed(1)}%` : \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"risk-level\",\n              children: getRiskLevelText(result.riskScore)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 625,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"top-features\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Key Genetic Markers\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 638,\n              columnNumber: 21\n            }, this), Array.isArray(result.topFeatures) && result.topFeatures.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"feature-list\",\n              children: result.topFeatures.map((feat, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"feature-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"gene-name\",\n                  children: feat.gene || \"Unknown Gene\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 643,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"importance-bar-container\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"importance-bar\",\n                    style: {\n                      width: typeof feat.importance === 'number' ? `${Math.min(feat.importance * 100, 100)}%` : '0%'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 645,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 644,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"importance-value\",\n                  children: safeNumberDisplay(feat.importance, 2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 654,\n                  columnNumber: 29\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 27\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"no-features\",\n              children: \"No genetic markers available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"back-button\",\n            onClick: handleBack,\n            children: \"Analyze Another Sample\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-results\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Preparing results...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"back-button\",\n            onClick: handleBack,\n            children: \"Back to Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"GeneSight v1.0.0 | AI-Powered Genetic Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 557,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"O1/eHNHwgPvyAgd1DUtP0ZZFWio=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SplashScreen","dnaVideo","jsxDEV","_jsxDEV","App","_s","showSplash","setShowSplash","fadeClass","setFadeClass","page","setPage","selectedFile","setSelectedFile","result","setResult","isLoading","setIsLoading","error","setError","timer","setTimeout","clearTimeout","handleFileChange","e","target","files","length","handleUpload","formData","FormData","append","response","fetch","method","body","ok","Error","status","statusText","data","json","console","log","validateResultData","message","riskScore","Array","isArray","topFeatures","forEach","feature","index","gene","importance","safeNumberDisplay","value","decimals","undefined","isNaN","toFixed","getRiskColor","score","getRiskLevelText","handleBack","handleRetry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","playsInline","onError","src","type","htmlFor","id","accept","onChange","name","onClick","disabled","map","feat","idx","style","width","Math","min","_c","$RefreshReg$"],"sources":["/Users/muhammadrashid/Desktop/Mammu/Mammu/GeneSight/GeneSight/Frontend/new/zipfiles/src/App.js"],"sourcesContent":["// // // // App.js\n// // // import React, { useState, useEffect } from 'react';\n// // // import SplashScreen from './SplashScreen';\n// // // import './styles.css';\n\n// // // // Import your video from the assets folder\n// // // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // // function App() {\n// // //   // 1) Splash screen states\n// // //   const [showSplash, setShowSplash] = useState(true);\n// // //   const [fadeClass, setFadeClass] = useState('');\n\n// // //   // 2) Page state (upload or results)\n// // //   const [page, setPage] = useState('upload');\n\n// // //   // Splash screen fade-out effect\n// // //   useEffect(() => {\n// // //     const timer = setTimeout(() => {\n// // //       setFadeClass('fade-out');\n// // //       setTimeout(() => {\n// // //         setShowSplash(false);\n// // //       }, 1000);\n// // //     }, 3000);\n\n// // //     return () => clearTimeout(timer);\n// // //   }, []);\n\n// // //   // Switch to 'results' page after file upload\n// // //   const handleUpload = () => {\n// // //     setPage('results');\n// // //   };\n\n// // //   return (\n// // //     <div className=\"App\">\n// // //       {/* SPLASH SCREEN */}\n// // //       {showSplash ? (\n// // //         <div className={`splash-wrapper ${fadeClass}`}>\n// // //           <SplashScreen />\n// // //         </div>\n// // //       ) : (\n// // //         /* MAIN MENU PAGE */\n// // //         <div className=\"main-menu\">\n// // //           <h1 className=\"main-title\">GENESIGHT</h1>\n// // //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// // //           <p className=\"description\">\n// // //             Get a quick and explainable risk assessment for disease prediction.\n// // //           </p>\n\n// // //           {/* HOLOGRAM SECTION */}\n// // //           <div className=\"hologram-container\">\n// // //             <video\n// // //               autoPlay\n// // //               loop\n// // //               muted\n// // //               playsInline\n// // //               className=\"hologram-video\"\n// // //             >\n// // //               <source src={dnaVideo} type=\"video/mp4\" />\n// // //               {/* Fallback text if video can't be played */}\n// // //               Your browser does not support the video tag.\n// // //             </video>\n// // //           </div>\n\n// // //           {/* CONTENT: either upload form or results */}\n// // //           {page === 'upload' ? (\n// // //             <div className=\"upload-section\">\n// // //               {/* \"Select File\" label as a clickable area for input */}\n// // //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// // //                 Select File\n// // //               </label>\n// // //               <input\n// // //                 id=\"file-upload\"\n// // //                 className=\"file-input\"\n// // //                 type=\"file\"\n// // //                 onChange={(e) =>\n// // //                   console.log('File selected:', e.target.files[0])\n// // //                 }\n// // //               />\n// // //               <button className=\"upload-button\" onClick={handleUpload}>\n// // //                 Upload Files Now\n// // //               </button>\n// // //             </div>\n// // //           ) : (\n// // //             <div className=\"results-section\">\n// // //               <h2>Analysis Results</h2>\n// // //               <p>Your model predictions or data visualizations go here!</p>\n// // //             </div>\n// // //           )}\n// // //         </div>\n// // //       )}\n// // //     </div>\n// // //   );\n// // // }\n\n// // // export default App;\n\n\n// // import React, { useState, useEffect } from 'react';\n// // import SplashScreen from './SplashScreen';\n// // import './styles.css';\n// // import dnaVideo from './assets/dnaHologram.mp4';\n\n// // function App() {\n// //   // Splash screen and page states\n// //   const [showSplash, setShowSplash] = useState(true);\n// //   const [fadeClass, setFadeClass] = useState('');\n// //   const [page, setPage] = useState('upload');\n\n// //   // State to store the file selected by the user\n// //   const [selectedFile, setSelectedFile] = useState(null);\n// //   // State to store prediction results\n// //   const [result, setResult] = useState(null);\n\n// //   useEffect(() => {\n// //     const timer = setTimeout(() => {\n// //       setFadeClass('fade-out');\n// //       setTimeout(() => {\n// //         setShowSplash(false);\n// //       }, 1000);\n// //     }, 3000);\n// //     return () => clearTimeout(timer);\n// //   }, []);\n\n// //   const handleFileChange = (e) => {\n// //     if (e.target.files.length > 0) {\n// //       setSelectedFile(e.target.files[0]);\n// //     }\n// //   };\n\n// //   const handleUpload = async () => {\n// //     if (!selectedFile) {\n// //       alert(\"Please select a file first.\");\n// //       return;\n// //     }\n// //     // Create a FormData object and append the file\n// //     const formData = new FormData();\n// //     formData.append(\"file\", selectedFile);\n\n// //     try {\n// //       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n// //         method: \"POST\",\n// //         body: formData\n// //       });\n// //       const data = await response.json();\n// //       console.log(\"Prediction result:\", data);\n// //       setResult(data);\n// //       setPage(\"results\");\n// //     } catch (error) {\n// //       console.error(\"Error uploading file:\", error);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"App\">\n// //       {showSplash ? (\n// //         <div className={`splash-wrapper ${fadeClass}`}>\n// //           <SplashScreen />\n// //         </div>\n// //       ) : (\n// //         <div className=\"main-menu\">\n// //           <h1 className=\"main-title\">GENESIGHT</h1>\n// //           <h2 className=\"subtitle\">Upload Your Gene Expression Data</h2>\n// //           <p className=\"description\">\n// //             Get a quick and explainable risk assessment for disease prediction.\n// //           </p>\n\n// //           {/* Hologram Section */}\n// //           <div className=\"hologram-container\">\n// //             <video autoPlay loop muted playsInline className=\"hologram-video\">\n// //               <source src={dnaVideo} type=\"video/mp4\" />\n// //               Your browser does not support the video tag.\n// //             </video>\n// //           </div>\n\n// //           {page === 'upload' ? (\n// //             <div className=\"upload-section\">\n// //               <label htmlFor=\"file-upload\" className=\"file-label\">\n// //                 Select File\n// //               </label>\n// //               <input\n// //                 id=\"file-upload\"\n// //                 className=\"file-input\"\n// //                 type=\"file\"\n// //                 onChange={handleFileChange}\n// //               />\n// //               <button className=\"upload-button\" onClick={handleUpload}>\n// //                 Upload Files Now\n// //               </button>\n// //             </div>\n// //           ) : (\n// //             <div className=\"results-section\">\n// //               <h2>Analysis Results</h2>\n// //               {result ? (\n// //                 <>\n// //                   <p>Risk Score: {result.riskScore}</p>\n// //                   <ul>\n// //                     {result.topFeatures.map((feat, idx) => (\n// //                       <li key={idx}>\n// //                         {feat.gene}: {feat.importance.toFixed(2)}\n// //                       </li>\n// //                     ))}\n// //                   </ul>\n// //                 </>\n// //               ) : (\n// //                 <p>No results available.</p>\n// //               )}\n// //             </div>\n// //           )}\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n\n// import React, { useState, useEffect } from 'react';\n// import SplashScreen from './SplashScreen';\n// import './styles.css';\n// import dnaVideo from './assets/dnaHologram.mp4';\n\n// function App() {\n//   // Splash screen and page states\n//   const [showSplash, setShowSplash] = useState(true);\n//   const [fadeClass, setFadeClass] = useState('');\n//   const [page, setPage] = useState('upload');\n\n//   // State to store the file selected by the user\n//   const [selectedFile, setSelectedFile] = useState(null);\n//   // State to store prediction results\n//   const [result, setResult] = useState(null);\n//   // Loading state\n//   const [isLoading, setIsLoading] = useState(false);\n//   // Error state\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setFadeClass('fade-out');\n//       setTimeout(() => {\n//         setShowSplash(false);\n//       }, 1000);\n//     }, 3000);\n//     return () => clearTimeout(timer);\n//   }, []);\n\n//   const handleFileChange = (e) => {\n//     if (e.target.files.length > 0) {\n//       setSelectedFile(e.target.files[0]);\n//       setError(null); // Clear any previous errors\n//     }\n//   };\n\n//   const handleUpload = async () => {\n//     if (!selectedFile) {\n//       setError(\"Please select a file first.\");\n//       return;\n//     }\n    \n//     // Set loading state\n//     setIsLoading(true);\n//     setError(null);\n    \n//     // Create a FormData object and append the file\n//     const formData = new FormData();\n//     formData.append(\"file\", selectedFile);\n\n//     try {\n//       // Make sure this URL matches your FastAPI server\n//       const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n//         method: \"POST\",\n//         body: formData\n//       });\n      \n//       if (!response.ok) {\n//         throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n//       }\n      \n//       const data = await response.json();\n//       console.log(\"Prediction result:\", data);\n      \n//       // Make sure the data matches the expected format\n//       if (data.riskScore === undefined || !Array.isArray(data.topFeatures)) {\n//         throw new Error(\"Unexpected response format from server\");\n//       }\n      \n//       setResult(data);\n//       setPage(\"results\");\n//     } catch (error) {\n//       console.error(\"Error uploading file:\", error);\n//       setError(`Error: ${error.message || \"Failed to process data\"}`);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   // Function to determine risk level color\n//   const getRiskColor = (score) => {\n//     if (score >= 0.7) return \"high-risk\";\n//     if (score >= 0.4) return \"medium-risk\";\n//     return \"low-risk\";\n//   };\n\n//   // Go back to upload page\n//   const handleBack = () => {\n//     setPage('upload');\n//     setResult(null);\n//     setSelectedFile(null);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {showSplash ? (\n//         <div className={`splash-wrapper ${fadeClass}`}>\n//           <SplashScreen />\n//         </div>\n//       ) : (\n//         <div className=\"main-menu\">\n//           <h1 className=\"main-title\">GENESIGHT</h1>\n//           <h2 className=\"subtitle\">\n//             {page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'}\n//           </h2>\n//           <p className=\"description\">\n//             {page === 'upload' \n//               ? 'Get a quick and explainable risk assessment for disease prediction.'\n//               : 'Analysis based on your genetic expression markers.'}\n//           </p>\n\n//           {/* Hologram Section */}\n//           <div className=\"hologram-container\">\n//             <video autoPlay loop muted playsInline className=\"hologram-video\">\n//               <source src={dnaVideo} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           </div>\n\n//           {page === 'upload' ? (\n//             <div className=\"upload-section\">\n//               <label htmlFor=\"file-upload\" className=\"file-label\">\n//                 Select Gene Expression File\n//               </label>\n//               <input\n//                 id=\"file-upload\"\n//                 className=\"file-input\"\n//                 type=\"file\"\n//                 accept=\".csv,.txt\"\n//                 onChange={handleFileChange}\n//               />\n//               {selectedFile && (\n//                 <p className=\"file-selected\">Selected: {selectedFile.name}</p>\n//               )}\n//               {error && <p className=\"error-message\">{error}</p>}\n//               <button \n//                 className={`upload-button ${isLoading ? 'loading' : ''}`} \n//                 onClick={handleUpload}\n//                 disabled={isLoading || !selectedFile}\n//               >\n//                 {isLoading ? 'Processing...' : 'Analyze Genetic Data'}\n//               </button>\n//             </div>\n//           ) : (\n//             <div className=\"results-section\">\n//               <h2>Genetic Risk Analysis</h2>\n//               {result ? (\n//                 <div className=\"results-container\">\n//                   <div className={`risk-score ${getRiskColor(result.riskScore)}`}>\n//                     <h3>Risk Score</h3>\n//                     <div className=\"score-value\">{(result.riskScore * 100).toFixed(1)}%</div>\n//                     <p className=\"risk-level\">\n//                       {result.riskScore >= 0.7 ? 'High Risk' : \n//                        result.riskScore >= 0.4 ? 'Medium Risk' : 'Low Risk'}\n//                     </p>\n//                   </div>\n                  \n//                   <div className=\"top-features\">\n//                     <h3>Key Genetic Markers</h3>\n//                     <ul className=\"feature-list\">\n//                       {result.topFeatures.map((feat, idx) => (\n//                         <li key={idx} className=\"feature-item\">\n//                           <span className=\"gene-name\">{feat.gene}</span>\n//                           <div className=\"importance-bar-container\">\n//                             <div \n//                               className=\"importance-bar\" \n//                               style={{width: `${Math.min(feat.importance * 100, 100)}%`}}\n//                             ></div>\n//                           </div>\n//                           <span className=\"importance-value\">{feat.importance.toFixed(2)}</span>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   </div>\n                  \n//                   <button className=\"back-button\" onClick={handleBack}>\n//                     Analyze Another Sample\n//                   </button>\n//                 </div>\n//               ) : (\n//                 <p>Loading results...</p>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport SplashScreen from './SplashScreen';\nimport './styles.css';\nimport dnaVideo from './assets/dnaHologram.mp4';\n\nfunction App() {\n  // Splash screen and page states\n  const [showSplash, setShowSplash] = useState(true);\n  const [fadeClass, setFadeClass] = useState('');\n  const [page, setPage] = useState('upload');\n\n  // State to store the file selected by the user\n  const [selectedFile, setSelectedFile] = useState(null);\n  // State to store prediction results\n  const [result, setResult] = useState(null);\n  // Loading state\n  const [isLoading, setIsLoading] = useState(false);\n  // Error state\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setFadeClass('fade-out');\n      setTimeout(() => {\n        setShowSplash(false);\n      }, 1000);\n    }, 3000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleFileChange = (e) => {\n    if (e.target.files.length > 0) {\n      setSelectedFile(e.target.files[0]);\n      setError(null); // Clear any previous errors\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setError(\"Please select a file first.\");\n      return;\n    }\n    \n    // Set loading state\n    setIsLoading(true);\n    setError(null);\n    \n    // Create a FormData object and append the file\n    const formData = new FormData();\n    formData.append(\"file\", selectedFile);\n\n    try {\n      // Make sure this URL matches your FastAPI server\n      const response = await fetch(\"http://127.0.0.1:8000/predict\", {\n        method: \"POST\",\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Server returned ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"Prediction result:\", data);\n      \n      // Validate the response data structure\n      validateResultData(data);\n      \n      setResult(data);\n      setPage(\"results\");\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      setError(`Error: ${error.message || \"Failed to process data\"}`);\n      setPage(\"upload\"); // Stay on upload page on error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Function to validate the response data structure\n  const validateResultData = (data) => {\n    if (!data) {\n      throw new Error(\"No data received from server\");\n    }\n    \n    if (typeof data.riskScore !== 'number') {\n      throw new Error(\"Invalid risk score format in response\");\n    }\n    \n    if (!Array.isArray(data.topFeatures)) {\n      throw new Error(\"Invalid top features format in response\");\n    }\n    \n    // Check each feature has the required structure\n    data.topFeatures.forEach((feature, index) => {\n      if (!feature.gene || typeof feature.importance !== 'number') {\n        throw new Error(`Invalid feature data at index ${index}`);\n      }\n    });\n  };\n\n  // Function to safely render numeric values\n  const safeNumberDisplay = (value, decimals = 1) => {\n    if (value === undefined || value === null || isNaN(value)) {\n      return \"N/A\";\n    }\n    return typeof value === 'number' ? value.toFixed(decimals) : \"N/A\";\n  };\n\n  // Function to determine risk level color\n  const getRiskColor = (score) => {\n    if (!score && score !== 0) return \"unknown-risk\";\n    if (score >= 0.7) return \"high-risk\";\n    if (score >= 0.4) return \"medium-risk\";\n    return \"low-risk\";\n  };\n\n  // Function to get risk level text\n  const getRiskLevelText = (score) => {\n    if (!score && score !== 0) return \"Unknown Risk\";\n    if (score >= 0.7) return \"High Risk\";\n    if (score >= 0.4) return \"Medium Risk\";\n    return \"Low Risk\";\n  };\n\n  // Go back to upload page\n  const handleBack = () => {\n    setPage('upload');\n    setResult(null);\n    setSelectedFile(null);\n    setError(null);\n  };\n\n  // Retry connection to server\n  const handleRetry = () => {\n    if (selectedFile) {\n      handleUpload();\n    } else {\n      setError(\"Please select a file first.\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {showSplash ? (\n        <div className={`splash-wrapper ${fadeClass}`}>\n          <SplashScreen />\n        </div>\n      ) : (\n        <div className=\"main-menu\">\n          <h1 className=\"main-title\">GENESIGHT</h1>\n          <h2 className=\"subtitle\">\n            {page === 'upload' ? 'Upload Your Gene Expression Data' : 'Genetic Disease Risk Analysis'}\n          </h2>\n          <p className=\"description\">\n            {page === 'upload' \n              ? 'Get a quick and explainable risk assessment for disease prediction.'\n              : 'Analysis based on your genetic expression markers.'}\n          </p>\n\n          {/* Hologram Section - with error handling for video load */}\n          <div className=\"hologram-container\">\n            <video \n              autoPlay \n              loop \n              muted \n              playsInline \n              className=\"hologram-video\"\n              onError={(e) => console.error(\"Video failed to load:\", e)}\n            >\n              <source src={dnaVideo} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n\n          {page === 'upload' ? (\n            <div className=\"upload-section\">\n              <label htmlFor=\"file-upload\" className=\"file-label\">\n                Select Gene Expression File\n              </label>\n              <input\n                id=\"file-upload\"\n                className=\"file-input\"\n                type=\"file\"\n                accept=\".csv,.txt\"\n                onChange={handleFileChange}\n              />\n              {selectedFile && (\n                <p className=\"file-selected\">Selected: {selectedFile.name}</p>\n              )}\n              {error && (\n                <div className=\"error-container\">\n                  <p className=\"error-message\">{error}</p>\n                  <button className=\"retry-button\" onClick={handleRetry}>\n                    Retry\n                  </button>\n                </div>\n              )}\n              <button \n                className={`upload-button ${isLoading ? 'loading' : ''}`} \n                onClick={handleUpload}\n                disabled={isLoading || !selectedFile}\n              >\n                {isLoading ? 'Processing...' : 'Analyze Genetic Data'}\n              </button>\n            </div>\n          ) : (\n            <div className=\"results-section\">\n              <h2>Genetic Risk Analysis</h2>\n              {result ? (\n                <div className=\"results-container\">\n                  <div className={`risk-score ${getRiskColor(result.riskScore)}`}>\n                    <h3>Risk Score</h3>\n                    <div className=\"score-value\">\n                      {typeof result.riskScore === 'number'\n                        ? `${(result.riskScore * 100).toFixed(1)}%`\n                        : \"N/A\"}\n                    </div>\n                    <p className=\"risk-level\">\n                      {getRiskLevelText(result.riskScore)}\n                    </p>\n                  </div>\n                  \n                  <div className=\"top-features\">\n                    <h3>Key Genetic Markers</h3>\n                    {Array.isArray(result.topFeatures) && result.topFeatures.length > 0 ? (\n                      <ul className=\"feature-list\">\n                        {result.topFeatures.map((feat, idx) => (\n                          <li key={idx} className=\"feature-item\">\n                            <span className=\"gene-name\">{feat.gene || \"Unknown Gene\"}</span>\n                            <div className=\"importance-bar-container\">\n                              <div \n                                className=\"importance-bar\" \n                                style={{\n                                  width: typeof feat.importance === 'number'\n                                    ? `${Math.min(feat.importance * 100, 100)}%`\n                                    : '0%'\n                                }}\n                              ></div>\n                            </div>\n                            <span className=\"importance-value\">\n                              {safeNumberDisplay(feat.importance, 2)}\n                            </span>\n                          </li>\n                        ))}\n                      </ul>\n                    ) : (\n                      <p className=\"no-features\">No genetic markers available</p>\n                    )}\n                  </div>\n                  \n                  <button className=\"back-button\" onClick={handleBack}>\n                    Analyze Another Sample\n                  </button>\n                </div>\n              ) : (\n                <div className=\"loading-results\">\n                  <p>Preparing results...</p>\n                  <button className=\"back-button\" onClick={handleBack}>\n                    Back to Upload\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Footer with version info */}\n          <div className=\"app-footer\">\n            <p>GeneSight v1.0.0 | AI-Powered Genetic Analysis</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,cAAc;AACrB,OAAOC,QAAQ,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,QAAQ,CAAC;;EAE1C;EACA,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtD;EACA,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}